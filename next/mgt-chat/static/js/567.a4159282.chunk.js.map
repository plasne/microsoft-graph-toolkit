{"version":3,"file":"static/js/567.a4159282.chunk.js","mappings":"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","sources":["../../../node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.form-associated.js","../../../node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.options.js","../../../node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.js","../../../node_modules/@fluentui/web-components/dist/esm/text-field/text-field.styles.js","../../../node_modules/@fluentui/web-components/dist/esm/text-field/index.js","../../../node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.template.js","../../../node_modules/lit/node_modules/lit-html/src/directive-helpers.ts","../../../node_modules/lit/node_modules/lit-html/src/directives/repeat.ts"],"sourcesContent":["import { FormAssociated } from \"../form-associated/form-associated.js\";\nimport { FoundationElement } from \"../foundation-element/foundation-element.js\";\nclass _TextField extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(TextField:class)} component.\n *\n * @internal\n */\nexport class FormAssociatedTextField extends FormAssociated(_TextField) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement(\"input\");\n    }\n}\n","/**\n * Text field sub-types\n * @public\n */\nexport const TextFieldType = {\n    /**\n     * An email TextField\n     */\n    email: \"email\",\n    /**\n     * A password TextField\n     */\n    password: \"password\",\n    /**\n     * A telephone TextField\n     */\n    tel: \"tel\",\n    /**\n     * A text TextField\n     */\n    text: \"text\",\n    /**\n     * A URL TextField\n     */\n    url: \"url\",\n};\n","import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { ARIAGlobalStatesAndProperties, StartEnd, } from \"../patterns/index.js\";\nimport { applyMixins } from \"../utilities/apply-mixins.js\";\nimport { FormAssociatedTextField } from \"./text-field.form-associated.js\";\nimport { TextFieldType } from \"./text-field.options.js\";\nexport { TextFieldType };\n/**\n * A Text Field Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type=\"text\" /> element }.\n *\n * @slot start - Content which can be provided before the number field input\n * @slot end - Content which can be provided after the number field input\n * @slot - The default slot for the label\n * @csspart label - The label\n * @csspart root - The element wrapping the control, including start and end slots\n * @csspart control - The text field element\n * @fires change - Fires a custom 'change' event when the value has changed\n *\n * @public\n */\nexport class TextField extends FormAssociatedTextField {\n    constructor() {\n        super(...arguments);\n        /**\n         * Allows setting a type or mode of text.\n         * @public\n         * @remarks\n         * HTML Attribute: type\n         */\n        this.type = TextFieldType.text;\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n            this.validate();\n        }\n    }\n    autofocusChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.autofocus = this.autofocus;\n            this.validate();\n        }\n    }\n    placeholderChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.placeholder = this.placeholder;\n        }\n    }\n    typeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.type = this.type;\n            this.validate();\n        }\n    }\n    listChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.setAttribute(\"list\", this.list);\n            this.validate();\n        }\n    }\n    maxlengthChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.maxLength = this.maxlength;\n            this.validate();\n        }\n    }\n    minlengthChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.minLength = this.minlength;\n            this.validate();\n        }\n    }\n    patternChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.pattern = this.pattern;\n            this.validate();\n        }\n    }\n    sizeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.size = this.size;\n        }\n    }\n    spellcheckChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.spellcheck = this.spellcheck;\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.proxy.setAttribute(\"type\", this.type);\n        this.validate();\n        if (this.autofocus) {\n            DOM.queueUpdate(() => {\n                this.focus();\n            });\n        }\n    }\n    /**\n     * Selects all the text in the text field\n     *\n     * @public\n     */\n    select() {\n        this.control.select();\n        /**\n         * The select event does not permeate the shadow DOM boundary.\n         * This fn effectively proxies the select event,\n         * emitting a `select` event whenever the internal\n         * control emits a `select` event\n         */\n        this.$emit(\"select\");\n    }\n    /**\n     * Handles the internal control's `input` event\n     * @internal\n     */\n    handleTextInput() {\n        this.value = this.control.value;\n    }\n    /**\n     * Change event handler for inner control.\n     * @remarks\n     * \"Change\" events are not `composable` so they will not\n     * permeate the shadow DOM boundary. This fn effectively proxies\n     * the change event, emitting a `change` event whenever the internal\n     * control emits a `change` event\n     * @internal\n     */\n    handleChange() {\n        this.$emit(\"change\");\n    }\n    /** {@inheritDoc (FormAssociated:interface).validate} */\n    validate() {\n        super.validate(this.control);\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], TextField.prototype, \"readOnly\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextField.prototype, \"autofocus\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"placeholder\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"type\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"list\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextField.prototype, \"maxlength\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextField.prototype, \"minlength\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"pattern\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextField.prototype, \"size\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextField.prototype, \"spellcheck\", void 0);\n__decorate([\n    observable\n], TextField.prototype, \"defaultSlottedNodes\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA textbox role\n *\n * @public\n */\nexport class DelegatesARIATextbox {\n}\napplyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);\napplyMixins(TextField, StartEnd, DelegatesARIATextbox);\n","import { css } from '@microsoft/fast-element';\nimport { display, forcedColorsStylesheetBehavior, } from '@microsoft/fast-foundation';\nimport { baseInputStyles, inputFilledStyles, inputForcedColorStyles, inputOutlineStyles, inputStateStyles, } from '../styles';\nimport { appearanceBehavior } from '../utilities/behaviors';\nimport { designUnit } from '../design-tokens';\nconst logicalControlSelector = '.root';\nexport const textFieldStyles = (context, definition) => css `\n    ${display('inline-block')}\n\n    ${baseInputStyles(context, definition, logicalControlSelector)}\n\n    ${inputStateStyles(context, definition, logicalControlSelector)}\n\n    .root {\n      display: flex;\n      flex-direction: row;\n    }\n\n    .control {\n      -webkit-appearance: none;\n      color: inherit;\n      background: transparent;\n      border: 0;\n      height: calc(100% - 4px);\n      margin-top: auto;\n      margin-bottom: auto;\n      padding: 0 calc(${designUnit} * 2px + 1px);\n      font-family: inherit;\n      font-size: inherit;\n      line-height: inherit;\n    }\n\n    .start,\n    .end {\n      display: flex;\n      margin: auto;\n    }\n\n    .start {\n      display: flex;\n      margin-inline-start: 11px;\n    }\n\n    .end {\n      display: flex;\n      margin-inline-end: 11px;\n    }\n  `.withBehaviors(appearanceBehavior('outline', inputOutlineStyles(context, definition, logicalControlSelector)), appearanceBehavior('filled', inputFilledStyles(context, definition, logicalControlSelector)), forcedColorsStylesheetBehavior(inputForcedColorStyles(context, definition, logicalControlSelector)));\n","import { __decorate } from \"tslib\";\nimport { attr } from '@microsoft/fast-element';\nimport { TextField as FoundationTextField, textFieldTemplate as template } from '@microsoft/fast-foundation';\nimport { textFieldStyles as styles } from './text-field.styles';\n/**\n * The Fluent text field class\n * @internal\n */\nexport class TextField extends FoundationTextField {\n    /**\n     * @internal\n     */\n    appearanceChanged(oldValue, newValue) {\n        if (oldValue !== newValue) {\n            this.classList.add(newValue);\n            this.classList.remove(oldValue);\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!this.appearance) {\n            this.appearance = 'outline';\n        }\n    }\n}\n__decorate([\n    attr\n], TextField.prototype, \"appearance\", void 0);\n/**\n * The Fluent Text Field Custom Element. Implements {@link @microsoft/fast-foundation#TextField},\n * {@link @microsoft/fast-foundation#textFieldTemplate}\n *\n *\n * @public\n * @remarks\n * HTML Element: \\<fluent-text-field\\>\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}\n */\nexport const fluentTextField = TextField.compose({\n    baseName: 'text-field',\n    baseClass: FoundationTextField,\n    template,\n    styles,\n    shadowOptions: {\n        delegatesFocus: true,\n    },\n});\n/**\n * Styles for TextField\n * @public\n */\nexport const textFieldStyles = styles;\n","import { html, ref, slotted } from \"@microsoft/fast-element\";\nimport { endSlotTemplate, startSlotTemplate } from \"../patterns/start-end.js\";\nimport { whitespaceFilter } from \"../utilities/whitespace-filter.js\";\n/**\n * The template for the {@link @microsoft/fast-foundation#(TextField:class)} component.\n * @public\n */\nexport const textFieldTemplate = (context, definition) => html `\n    <template\n        class=\"\n            ${x => (x.readOnly ? \"readonly\" : \"\")}\n        \"\n    >\n        <label\n            part=\"label\"\n            for=\"control\"\n            class=\"${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length\n    ? \"label\"\n    : \"label label__hidden\"}\"\n        >\n            <slot\n                ${slotted({ property: \"defaultSlottedNodes\", filter: whitespaceFilter })}\n            ></slot>\n        </label>\n        <div class=\"root\" part=\"root\">\n            ${startSlotTemplate(context, definition)}\n            <input\n                class=\"control\"\n                part=\"control\"\n                id=\"control\"\n                @input=\"${x => x.handleTextInput()}\"\n                @change=\"${x => x.handleChange()}\"\n                ?autofocus=\"${x => x.autofocus}\"\n                ?disabled=\"${x => x.disabled}\"\n                list=\"${x => x.list}\"\n                maxlength=\"${x => x.maxlength}\"\n                minlength=\"${x => x.minlength}\"\n                pattern=\"${x => x.pattern}\"\n                placeholder=\"${x => x.placeholder}\"\n                ?readonly=\"${x => x.readOnly}\"\n                ?required=\"${x => x.required}\"\n                size=\"${x => x.size}\"\n                ?spellcheck=\"${x => x.spellcheck}\"\n                :value=\"${x => x.value}\"\n                type=\"${x => x.type}\"\n                aria-atomic=\"${x => x.ariaAtomic}\"\n                aria-busy=\"${x => x.ariaBusy}\"\n                aria-controls=\"${x => x.ariaControls}\"\n                aria-current=\"${x => x.ariaCurrent}\"\n                aria-describedby=\"${x => x.ariaDescribedby}\"\n                aria-details=\"${x => x.ariaDetails}\"\n                aria-disabled=\"${x => x.ariaDisabled}\"\n                aria-errormessage=\"${x => x.ariaErrormessage}\"\n                aria-flowto=\"${x => x.ariaFlowto}\"\n                aria-haspopup=\"${x => x.ariaHaspopup}\"\n                aria-hidden=\"${x => x.ariaHidden}\"\n                aria-invalid=\"${x => x.ariaInvalid}\"\n                aria-keyshortcuts=\"${x => x.ariaKeyshortcuts}\"\n                aria-label=\"${x => x.ariaLabel}\"\n                aria-labelledby=\"${x => x.ariaLabelledby}\"\n                aria-live=\"${x => x.ariaLive}\"\n                aria-owns=\"${x => x.ariaOwns}\"\n                aria-relevant=\"${x => x.ariaRelevant}\"\n                aria-roledescription=\"${x => x.ariaRoledescription}\"\n                ${ref(\"control\")}\n            />\n            ${endSlotTemplate(context, definition)}\n        </div>\n    </template>\n`;\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n"],"names":["_TextField","_FoundationElement","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","FoundationElement","FormAssociatedTextField","_FormAssociated","_super2","_this","proxy","document","createElement","FormAssociated","TextFieldType","TextField","_FormAssociatedTextFi","type","key","value","this","HTMLInputElement","readOnly","validate","autofocus","placeholder","setAttribute","list","maxLength","maxlength","minLength","minlength","pattern","size","spellcheck","_this2","_get","_getPrototypeOf","prototype","call","DOM","queueUpdate","focus","control","select","$emit","__decorate","attr","attribute","mode","converter","nullableNumberConverter","observable","DelegatesARIATextbox","applyMixins","ARIAGlobalStatesAndProperties","StartEnd","logicalControlSelector","_FoundationTextField","oldValue","newValue","classList","add","remove","appearance","FoundationTextField","fluentTextField","compose","baseName","baseClass","template","context","definition","html","_templateObject","_taggedTemplateLiteral","x","defaultSlottedNodes","length","slotted","property","filter","whitespaceFilter","startSlotTemplate","handleTextInput","handleChange","disabled","required","ariaAtomic","ariaBusy","ariaControls","ariaCurrent","ariaDescribedby","ariaDetails","ariaDisabled","ariaErrormessage","ariaFlowto","ariaHaspopup","ariaHidden","ariaInvalid","ariaKeyshortcuts","ariaLabel","ariaLabelledby","ariaLive","ariaOwns","ariaRelevant","ariaRoledescription","ref","endSlotTemplate","styles","css","display","baseInputStyles","inputStateStyles","designUnit","withBehaviors","appearanceBehavior","inputOutlineStyles","inputFilledStyles","forcedColorsStylesheetBehavior","inputForcedColorStyles","shadowOptions","delegatesFocus","t","o","D","s","createComment","r","i","n","e","_$AA","parentNode","l","_$AB","insertBefore","c","options","_n$_$AQ","_n","nextSibling","_$AM","_$AQ","_$AP","_$AU","v","undefined","_$AI","u","h","_o$_$AP","Map","set","_t","_class","CHILD","Error","_possibleConstructorReturn","_step","_iterator","_createForOfIteratorHelper","done","err","f","values","keys","ht","_ref","_this$dt","_ref2","_slicedToArray","d","_$AH","_this$ht","p","a","Array","isArray","dt","m","y","j","k","w","has","get"],"sourceRoot":""}