{"version":3,"file":"static/js/540.f81d52fa.chunk.js","mappings":"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","sources":["components/PageHeader.tsx","../../../packages/mgt-react/src/generated/taxonomy-picker.ts","pages/Taxonomy/TaxonomyExplorer.tsx","pages/TaxonomyPage.tsx","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["import * as React from 'react';\nimport { Divider, makeStyles } from '@fluentui/react-components';\n\nexport interface IPageHeaderProps {\n  title: string;\n  description: string;\n}\n\nconst useStyles = makeStyles({\n  divider: {\n    alignItems: 'self-start',\n    paddingTop: '20px',\n    marginBottom: '20px'\n  }\n});\n\nexport const PageHeader: React.FunctionComponent<IPageHeaderProps> = props => {\n  const styles = useStyles();\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <div>{props.description}</div>\n      <Divider className={styles.divider} />\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtTaxonomyPickerComponent } from '@microsoft/mgt-components';\nimport { TemplateContext,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type TaxonomyPickerProps = {\n\ttermsetId?: string;\n\ttermId?: string;\n\tsiteId?: string;\n\tlocale?: string;\n\tversion?: string;\n\tplaceholder?: string;\n\tposition?: string;\n\tdefaultSelectedTermId?: string;\n\tselectedTerm?: MicrosoftGraph.TermStore.Term;\n\tdisabled?: boolean;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\ttemplateContext?: TemplateContext;\n\tselectionChanged?: (e: CustomEvent<MicrosoftGraph.TermStore.Term>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const TaxonomyPicker = wrapMgt<TaxonomyPickerProps>('taxonomy-picker', registerMgtTaxonomyPickerComponent);\n\n","import * as React from 'react';\nimport { Get, MgtTemplateProps, TaxonomyPicker } from '@microsoft/mgt-react';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  makeStyles,\n  shorthands,\n  Card,\n  CardHeader,\n  Caption1,\n  tokens,\n  Text\n} from '@fluentui/react-components';\nimport { TermStore } from '@microsoft/microsoft-graph-types';\nimport { TagMultipleRegular, TagRegular } from '@fluentui/react-icons';\n\nexport const TaxonomyExplorer: React.FunctionComponent = () => {\n  return (\n    <>\n      <Get resource=\"termStore/groups\" version=\"beta\" scopes={[\"TermStore.Read.All\"]}>\n        <GroupTemplate template=\"default\" />\n      </Get>\n    </>\n  );\n};\n\nconst useStyles = makeStyles({\n  main: {\n    ...shorthands.gap('36px'),\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  },\n\n  title: {\n    ...shorthands.margin(0, 0, '12px')\n  },\n\n  description: {\n    ...shorthands.margin(0, 0, '12px')\n  },\n\n  card: {\n    width: '480px',\n    maxWidth: '100%',\n    height: 'fit-content',\n    ...shorthands.margin('12px', 0)\n  },\n\n  caption: {\n    color: tokens.colorNeutralForeground3\n  },\n\n  icon: {\n    width: '24px',\n    height: '24px'\n  },\n\n  text: {\n    ...shorthands.margin(0)\n  },\n\n  groupPanel: {\n    ...shorthands.margin('12px', '24px')\n  },\n\n  termPanel: {\n    ...shorthands.margin('12px', '36px')\n  }\n});\n\nconst GroupTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [groups] = React.useState<any[]>(props.dataContext.value);\n\n  return (\n    <Accordion collapsible>\n      {groups.map(group => (\n        <AccordionItem value={group.id} key={group.id}>\n          <AccordionHeader icon={<TagMultipleRegular />}>{group.displayName}</AccordionHeader>\n          <AccordionPanel className={styles.groupPanel}>\n            <Get resource={`termStore/groups/${group.id}/sets`} version=\"beta\" scopes={[\"TermStore.Read.All\"]}>\n              <SetTemplate template=\"default\" />\n            </Get>\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n\nconst SetTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [sets] = React.useState<any[]>(props.dataContext.value);\n  const [selectedTerm, setSelectedTerm] = React.useState<TermStore.Term | null>(null);\n\n  return (\n    <Accordion collapsible onToggle={() => setSelectedTerm(null)}>\n      {sets.map(set => (\n        <AccordionItem value={set.id} key={set.id}>\n          <AccordionHeader>{set.localizedNames[0].name}</AccordionHeader>\n          <AccordionPanel className={styles.termPanel}>\n            <TaxonomyPicker termsetId={set.id} selectionChanged={e => setSelectedTerm(e.detail)} />\n            {selectedTerm && (\n              <Card className={styles.card}>\n                <CardHeader\n                  image={<TagRegular className={styles.icon} />}\n                  header={<Text weight=\"semibold\">{selectedTerm.labels?.[0].name}</Text>}\n                  description={<Caption1 className={styles.caption}>{selectedTerm.id}</Caption1>}\n                />\n\n                {selectedTerm.descriptions?.length! > 0 && (\n                  <p className={styles.text}>{selectedTerm.descriptions?.[0].description}</p>\n                )}\n              </Card>\n            )}\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { TaxonomyExplorer } from './Taxonomy/TaxonomyExplorer';\n\nconst TaxonomyPage: React.FunctionComponent = () => {\n  return (\n    <>\n      <PageHeader\n        title={'Taxonomy Explorer'}\n        description={'Use this taxonomy explorer to see all term groups, term sets and terms available'}\n      ></PageHeader>\n      <TaxonomyExplorer />\n    </>\n  );\n};\n\nexport default TaxonomyPage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components';\nimport { TemplateContext,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["useStyles","makeStyles","divider","alignItems","paddingTop","marginBottom","PageHeader","props","styles","_jsxs","children","_jsx","title","description","Divider","className","TaxonomyPicker","wrapMgt","registerMgtTaxonomyPickerComponent","TaxonomyExplorer","_Fragment","Get","resource","version","scopes","GroupTemplate","template","main","_objectSpread","shorthands","gap","display","flexDirection","flexWrap","margin","card","width","maxWidth","height","caption","color","tokens","colorNeutralForeground3","icon","text","groupPanel","termPanel","_React$useState","React","dataContext","value","groups","_slicedToArray","Accordion","collapsible","map","group","AccordionItem","id","AccordionHeader","TagMultipleRegular","displayName","AccordionPanel","concat","SetTemplate","_React$useState3","sets","_React$useState5","_React$useState6","selectedTerm","setSelectedTerm","onToggle","set","_selectedTerm$labels","_selectedTerm$descrip","_selectedTerm$descrip2","localizedNames","name","termsetId","selectionChanged","e","detail","Card","CardHeader","image","TagRegular","header","Text","weight","labels","Caption1","descriptions","length","registerMgtGetComponent"],"sourceRoot":""}