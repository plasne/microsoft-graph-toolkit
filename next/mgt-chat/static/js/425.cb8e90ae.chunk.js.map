{"version":3,"file":"static/js/425.cb8e90ae.chunk.js","mappings":"65CA2BaA,EAAkB,SAACC,GAC9B,OAAOC,MAAMC,QAASF,EAA0BG,mBAClD,EA6CaC,EAAkB,WAAH,OAA6BC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKvD,OAJMJ,EAAmCK,EAAAA,EAAaC,SACpDC,EAAAA,EAAQC,UACRD,EAAAA,EAAQC,UAAUC,OAAOD,WAC1BN,EAAAE,KAAA,EACKJ,EAAMU,aAAY,wBAAAR,EAAAS,OAAA,GAAAZ,EAAA,IACzB,EAKYa,EAA0B,WAAH,OAClCP,EAAAA,EAAaQ,OAAOC,MAAMC,oBAAsBV,EAAAA,EAAaQ,OAAOG,yBAAyB,EAKlFC,EAAyB,WAAH,OACjCZ,EAAAA,EAAaQ,OAAOC,MAAMI,WAAab,EAAAA,EAAaQ,OAAOK,SAAS,EAWzDC,EAA6B,WAAH,OACrCd,EAAAA,EAAaQ,OAAOL,UAAUU,WAAab,EAAAA,EAAaQ,OAAOK,SAAS,EAS7DE,EAAsB,SACjCC,EACAC,GAAgB,IAChBC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoBjB,EAAAA,EAAQO,MAAML,OAAOkB,YACzCC,EAAMJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,aAAY,OACC5B,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+B,IAAA,IAAA7B,EAAA8B,EAAAC,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OAGH,OADbJ,EAA+BK,EAAAA,EAAaC,SAAoBC,EAAAA,EAAQO,MAAOS,GAAUS,EAAA5B,KAAA,EACtE6B,EAAiBjC,EAAOsB,GAAS,OAA1C,KAAVQ,EAAUE,EAAAE,MACA,CAAFF,EAAA5B,KAAA,eAAA4B,EAAAG,OAAA,SACLL,GAAU,OAKL,OALKE,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAKCiB,EAAMe,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAAWV,IAASW,MAAK,OAAzE,GAARR,EAAQC,EAAAE,MAEJjB,IAA0B,CAAFe,EAAA5B,KAAA,SAC1B,OAD0B4B,EAAA5B,KAAA,GACpBJ,EAAMwC,SAASlB,EAAU,CAAEmB,KAAMC,KAAKC,UAAUZ,KAAY,QAAAC,EAAA5B,KAAA,iBAAA4B,EAAA7B,KAAA,GAAA6B,EAAAY,GAAAZ,EAAA,wBAAAA,EAAAG,OAAA,SAK/DJ,GAAY,MAAI,yBAAAC,EAAArB,OAAA,GAAAkB,EAAA,kBACxB,EAGYgB,EAAmB,SAAOxB,EAAeyB,EAAiBC,GAAc,OAAwBnD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAkD,IAAA,IAAAC,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,OACxD,OAA7C6C,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUJ,GAAMG,EAAAf,OAAA,SAC5Cf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAO2C,aAAW,wBAAAF,EAAAvC,OAAA,GAAAqC,EAAA,IAC7E,EAGYK,EAAqB,SAAOhC,EAAeyB,EAAiBQ,GAAgB,OAAwB1D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAyD,IAAA,IAAAN,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAuD,GAAA,cAAAA,EAAArD,KAAAqD,EAAApD,MAAA,OAC1D,OAA/C6C,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUG,GAAQE,EAAArB,OAAA,SAC9Cf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAO2C,aAAW,wBAAAI,EAAA7C,OAAA,GAAA4C,EAAA,IAC7E,EAGYE,EAAwB,SAAOpC,EAAeqC,EAAiBX,GAAc,OAAwBnD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA6D,IAAA,IAAAV,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,OACvD,OAAnD6C,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBJ,GAAMa,EAAAzB,OAAA,SAClDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOoD,aAAW,wBAAAD,EAAAjD,OAAA,GAAAgD,EAAA,IAC7E,EAGYG,EAA0B,SAAOzC,EAAeqC,EAAiBJ,GAAgB,OAAwB1D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAiE,IAAA,IAAAd,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,OACzD,OAArD6C,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBG,GAAQU,EAAA7B,OAAA,SACpDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOoD,aAAW,wBAAAG,EAAArD,OAAA,GAAAoD,EAAA,IAC7E,EAGYE,EAAqB,SAAO5C,EAAe0B,GAAc,OAAwBnD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAoE,IAAA,IAAAjB,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OAClD,OAApC6C,EAAW,mBAAHE,OAAsBJ,GAAMoB,EAAAhC,OAAA,SACnCf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAO2D,YAAU,wBAAAD,EAAAxD,OAAA,GAAAuD,EAAA,IAC5E,EAGYG,EAAuB,SAAOhD,EAAeiC,GAAgB,OAAwB1D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwE,IAAA,IAAArB,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAsE,GAAA,cAAAA,EAAApE,KAAAoE,EAAAnE,MAAA,OACpD,OAAtC6C,EAAW,mBAAHE,OAAsBG,GAAQiB,EAAApC,OAAA,SACrCf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAO2D,YAAU,wBAAAG,EAAA5D,OAAA,GAAA2D,EAAA,IAC5E,EAGYE,EAAuB,SAAOnD,EAAeoD,EAAgB1B,GAAc,OAAwBnD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4E,IAAA,IAAAzB,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,OACvD,OAAjD6C,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBJ,GAAM4B,EAAAxC,OAAA,SAChDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOmE,YAAU,wBAAAD,EAAAhE,OAAA,GAAA+D,EAAA,IAC5E,EAGYG,EAAyB,SAAOxD,EAAeoD,EAAgBnB,GAAgB,OAAwB1D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgF,IAAA,IAAA7B,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAA8E,GAAA,cAAAA,EAAA5E,KAAA4E,EAAA3E,MAAA,OACzD,OAAnD6C,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBG,GAAQyB,EAAA5C,OAAA,SAClDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOmE,YAAU,wBAAAG,EAAApE,OAAA,GAAAmE,EAAA,IAC5E,EAGYE,EAAuB,SAClC3D,EACAoD,EACAQ,EACAlC,GAAc,OACQnD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAoF,IAAA,IAAAjC,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,OAC2C,OAA3D6C,EAAW,UAAHE,OAAasB,EAAM,WAAAtB,OAAU8B,EAAM,WAAA9B,OAAUJ,EAAM,cAAAoC,EAAAhD,OAAA,SAC1Df,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOmE,YAAU,wBAAAO,EAAAxE,OAAA,GAAAuE,EAAA,IAC5E,EAGYE,EAAuB,SAAO/D,EAAegE,EAAgBtC,GAAc,OAAwBnD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwF,IAAA,IAAArC,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAsF,GAAA,cAAAA,EAAApF,KAAAoF,EAAAnF,MAAA,OACvD,OAAjD6C,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBJ,GAAMwC,EAAApD,OAAA,SAChDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAO2D,YAAU,wBAAAmB,EAAA5E,OAAA,GAAA2E,EAAA,IAC5E,EAGYE,EAAyB,SAAOnE,EAAegE,EAAgB/B,GAAgB,OAAwB1D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2F,IAAA,IAAAxC,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAyF,GAAA,cAAAA,EAAAvF,KAAAuF,EAAAtF,MAAA,OACzD,OAAnD6C,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBG,GAAQoC,EAAAvD,OAAA,SAClDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAO2D,YAAU,wBAAAsB,EAAA/E,OAAA,GAAA8E,EAAA,IAC5E,EAKYE,EAA6B,SACxCtE,EACAuE,EACAC,GAAU,OACYjG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgG,IAAA,IAAA7C,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAA8F,GAAA,cAAAA,EAAA5F,KAAA4F,EAAA3F,MAAA,OAC4B,OAA5C6C,EAAW,gBAAHE,OAAmByC,EAAW,KAAAzC,OAAI0C,EAAE,aAAAE,EAAA5D,OAAA,SAC3Cf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOuF,aAAc,mBAAiB,wBAAAD,EAAApF,OAAA,GAAAmF,EAAA,IACjG,EAGYG,EAA+B,SAC1C5E,EACAgE,EACAO,EACAC,GAAU,OACYjG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAoG,IAAA,IAAAjD,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,OACyC,OAAzD6C,EAAW,UAAHE,OAAakC,EAAM,cAAAlC,OAAayC,EAAW,KAAAzC,OAAI0C,EAAE,aAAAM,EAAAhE,OAAA,SACxDf,EAAoBC,EAAO4B,EAAU1C,EAAAA,EAAQO,MAAML,OAAOuF,aAAc,mBAAiB,wBAAAG,EAAAxF,OAAA,GAAAuF,EAAA,IACjG,EAEKE,EAAc,SAClB/E,EACA4B,EACA1B,EACAK,EACAyE,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwG,IAAA,IAAAC,EAAAvG,EAAAwG,EAAAC,EAAAC,EAAA,OAAA7G,EAAAA,EAAAA,KAAAI,MAAA,SAAA0G,GAAA,cAAAA,EAAAxG,KAAAwG,EAAAvG,MAAA,OAKxB,OADXJ,EAAmCK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAWe,GAAUoF,EAAAvG,KAAA,EACpFwG,EAAqB5G,EAAOuB,EAAW,GAAF4B,OAAKF,EAAQ,KAAAE,OAAIkD,IAAM,OAArE,KAARG,EAAQG,EAAAzE,MACA,CAAFyE,EAAAvG,KAAA,QACkF,OAA5FmG,EAAoBM,EAA8BxF,EAAOmF,EAAS1F,MAAO0F,EAASE,UAAUC,EAAAxE,OAAA,SAErFoE,GAAiB,OAUJ,OAVII,EAAAxG,KAAA,EAMxBsG,EAAUpF,EAAMe,IAAIa,GAAUZ,kBAAkBC,EAAAA,EAAUwE,WAAC,GAADC,EAAAA,EAAAA,GAAInF,KAC1DyE,GACFI,EAAQJ,IAAIA,GACbM,EAAAvG,KAAA,GACyB4G,EAAgC3F,EAAOoF,GAAQ,QAAxD,GAAjBF,EAAiBI,EAAAzE,MAEbf,IAA8B,CAAFwF,EAAAvG,KAAA,SAE9B,OADMsG,EAAWH,EAAkBG,SAAQC,EAAAvG,KAAA,GACrCJ,EAAMwC,SAASS,EAAU,CAC7BnC,MAAOyF,EAAkBU,MAAMC,KAAI,SAAAC,GAAC,OAAIzE,KAAKC,UAAUwE,EAAE,IACzDT,SAAAA,IACA,QAAAC,EAAAvG,KAAA,iBAAAuG,EAAAxG,KAAA,GAAAwG,EAAA/D,GAAA+D,EAAA,wBAAAA,EAAAxE,OAAA,SAICoE,GAAqB,MAAI,yBAAAI,EAAAhG,OAAA,GAAA2F,EAAA,kBACjC,EAGYc,EAAmB,SAAO/F,EAAegF,GAAY,OAA2CzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuH,IAAA,IAAAC,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAsH,GAAA,cAAAA,EAAApH,KAAAoH,EAAAnH,MAAA,OAEtD,MADpC,0BACXkH,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAAS+G,EAAApF,OAAA,SAC9CiE,EAAY/E,EAFF,0BAEmBiG,EAAY,CAAC,cAAejB,IAAI,wBAAAkB,EAAA5G,OAAA,GAAA0G,EAAA,IACrE,EAGYG,EAA4B,SACvCnG,EACAyB,EACAC,EACAsD,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2H,IAAA,IAAAxE,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAyH,GAAA,cAAAA,EAAAvH,KAAAuH,EAAAtH,MAAA,OAEY,OAD/C6C,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUJ,EAAM,aAC7CuE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASkH,EAAAvF,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAAqB,EAAA/G,OAAA,GAAA8G,EAAA,IACrE,EAGYE,EAA8B,SACzCtG,EACAyB,EACAQ,EACA+C,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA8H,IAAA,IAAA3E,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAA4H,GAAA,cAAAA,EAAA1H,KAAA0H,EAAAzH,MAAA,OAEY,OAD/C6C,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUG,EAAQ,cAC/CgE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASqH,EAAA1F,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAAwB,EAAAlH,OAAA,GAAAiH,EAAA,IACrE,EAGYE,EAA4B,SACvCzG,EACAqC,EACAX,EACAsD,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAiI,IAAA,IAAA9E,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAA+H,GAAA,cAAAA,EAAA7H,KAAA6H,EAAA5H,MAAA,OAEY,OAD/C6C,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBJ,EAAM,aACnDuE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASwH,EAAA7F,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAA2B,EAAArH,OAAA,GAAAoH,EAAA,IACrE,EAGYE,EAA8B,SACzC5G,EACAqC,EACAJ,EACA+C,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAoI,IAAA,IAAAjF,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAkI,GAAA,cAAAA,EAAAhI,KAAAgI,EAAA/H,MAAA,OAEY,OAD/C6C,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBG,EAAQ,cACrDgE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAAS2H,EAAAhG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAA8B,EAAAxH,OAAA,GAAAuH,EAAA,IACrE,EAGYE,EAAuB,SAClC/G,EACA0B,EACAsD,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuI,IAAA,IAAApF,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAqI,GAAA,cAAAA,EAAAnI,KAAAmI,EAAAlI,MAAA,OAEY,OAD/C6C,EAAW,mBAAHE,OAAsBJ,EAAM,aACpCuE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAAS8H,EAAAnG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAAiC,EAAA3H,OAAA,GAAA0H,EAAA,IACrE,EAGYE,EAAyB,SACpClH,EACAiC,EACA+C,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA0I,IAAA,IAAAvF,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAwI,GAAA,cAAAA,EAAAtI,KAAAsI,EAAArI,MAAA,OAEY,OAD/C6C,EAAW,mBAAHE,OAAsBG,EAAQ,cACtCgE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASiI,EAAAtG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAAoC,EAAA9H,OAAA,GAAA6H,EAAA,IACrE,EAGYE,EAA2B,SACtCrH,EACAoD,EACA1B,EACAsD,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA6I,IAAA,IAAA1F,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAA2I,GAAA,cAAAA,EAAAzI,KAAAyI,EAAAxI,MAAA,OAEY,OAD/C6C,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBJ,EAAM,aACjDuE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASoI,EAAAzG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAAuC,EAAAjI,OAAA,GAAAgI,EAAA,IACrE,EAGYE,EAA6B,SACxCxH,EACAoD,EACAnB,EACA+C,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgJ,IAAA,IAAA7F,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAA8I,GAAA,cAAAA,EAAA5I,KAAA4I,EAAA3I,MAAA,OAEY,OAD/C6C,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBG,EAAQ,cACnDgE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASuI,EAAA5G,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAA0C,EAAApI,OAAA,GAAAmI,EAAA,IACrE,EAGYE,EAA2B,SACtC3H,EACAgE,EACAtC,EACAsD,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAmJ,IAAA,IAAAhG,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAiJ,GAAA,cAAAA,EAAA/I,KAAA+I,EAAA9I,MAAA,OAEY,OAD/C6C,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBJ,EAAM,aACjDuE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAAS0I,EAAA/G,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAA6C,EAAAvI,OAAA,GAAAsI,EAAA,IACrE,EAGYE,EAA6B,SACxC9H,EACAgE,EACA/B,EACA+C,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAsJ,IAAA,IAAAnG,EAAAqE,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAoJ,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAjJ,MAAA,OAEY,OAD/C6C,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBG,EAAQ,cACnDgE,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAAS6I,EAAAlH,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUqE,EAAY,CAAC,cAAejB,IAAI,wBAAAgD,EAAA1I,OAAA,GAAAyI,EAAA,IACrE,EAEYE,EAA8B,SACzCjI,EACAkI,EACAlD,GAAY,OAC6BzG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA0J,IAAA,IAAAlC,EAAA,OAAAzH,EAAAA,EAAAA,KAAAI,MAAA,SAAAwJ,GAAA,cAAAA,EAAAtJ,KAAAsJ,EAAArJ,MAAA,OACY,OAA/CkH,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOD,UAASiJ,EAAAtH,OAAA,SAC9CiE,EAAY/E,EAAOkI,EAAWjC,EAAY,CAAC,aAAc,kBAAmBjB,IAAI,wBAAAoD,EAAA9I,OAAA,GAAA6I,EAAA,IACxF,EAGYE,EAAqB,SAAOrI,EAAeuE,GAAmB,OAA0BhG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA6J,IAAA,IAAA1G,EAAAqE,EAAAtH,EAAAwG,EAAA5E,EAAAgI,EAAAC,EAAA,OAAAhK,EAAAA,EAAAA,KAAAI,MAAA,SAAA6J,GAAA,cAAAA,EAAA3J,KAAA2J,EAAA1J,MAAA,OAMlF,OALX6C,EAAW,gBAAHE,OAAmByC,GAC3B0B,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOsJ,iBAGtC/J,EAAmCK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAW8G,GAAWwC,EAAA1J,KAAA,EACrFwG,EAAqB5G,EAAOsH,EAAYrE,GAAS,OAA1D,KAARuD,EAAQsD,EAAA5H,MACA,CAAF4H,EAAA1J,KAAA,eAAA0J,EAAA3H,OAAA,SAEHqE,EAAS1F,MAAMoG,KAAI,SAACzE,GAAY,OAAKC,KAAKsH,MAAMvH,EAAkB,KAAC,OAOvD,OAHfb,EAAS,CAAC,kBAAiBkI,EAAA3J,KAAA,EAAA2J,EAAA1J,KAAA,GAGNiB,EACtBe,IAAIa,GACJgH,OAAO,yDACP5H,kBAAkBC,EAAAA,EAAUwE,WAAC,EAAGlF,IAChCW,MAAK,QAJRqH,EAAeE,EAAA5H,KAAA4H,EAAA1J,KAAG,GAAH,cAAA0J,EAAA3J,KAAG,GAAH2J,EAAAlH,GAAAkH,EAAA,iBAQF,OAREA,EAAA1J,KAAG,GAQC8J,EAAwB7I,EAAOuI,EAAiBhI,GAAO,QAAhE,GAANiI,EAAMC,EAAA5H,MACRf,IAA8B,CAAF2I,EAAA1J,KAAA,SAC9B,OAD8B0J,EAAA1J,KAAA,GACxBJ,EAAMwC,SAASS,EAAU,CAAEnC,MAAO+I,EAAO3C,KAAI,SAAAzE,GAAI,OAAIC,KAAKC,UAAUF,EAAK,MAAI,eAAAqH,EAAA3H,OAAA,SAG9E0H,GAAU,MAAI,yBAAAC,EAAAnJ,OAAA,GAAAgJ,EAAA,kBACtB,EAGYQ,EAAuB,SAClC9I,EACAgE,EACAO,GAAmB,OACKhG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAsK,IAAA,IAAAnH,EAAAgH,EAAAI,EAAA/C,EAAAtH,EAAAwG,EAAA5E,EAAAgI,EAAAC,EAAA,OAAAhK,EAAAA,EAAAA,KAAAI,MAAA,SAAAqK,GAAA,cAAAA,EAAAnK,KAAAmK,EAAAlK,MAAA,OAiBP,MAbG,WAAhBwF,GACF3C,EAAW,sBACXgH,EAAS,gCAAH9G,OAAmCkC,EAAM,qEAE/CpC,EAAW,UAAHE,OAAakC,EAAM,cAAAlC,OAAayC,GACxCqE,EAAS,yDAGLI,EAAM,GAAHlH,OAAMF,EAAQ,aAAAE,OAAY8G,GAG7B3C,EAAa/G,EAAAA,EAAQC,UAAUC,OAAOsJ,iBACtC/J,EAAmCK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAW8G,GAAWgD,EAAAlK,KAAA,EACrFwG,EAAqB5G,EAAOsH,EAAY+C,GAAI,OAArD,KAAR7D,EAAQ8D,EAAApI,MACA,CAAFoI,EAAAlK,KAAA,eAAAkK,EAAAnI,OAAA,SACHqE,EAAS1F,MAAMoG,KAAI,SAACzE,GAAY,OAAKC,KAAKsH,MAAMvH,EAAkB,KAAC,OAQvD,OAJfb,EAAS,CAAC,kBAAiB0I,EAAAnK,KAAA,GAAAmK,EAAAlK,KAAA,GAINiB,EACtBe,IAAIa,GACJgH,OAAOA,GACP5H,kBAAkBC,EAAAA,EAAUwE,WAAC,EAAGlF,IAChCW,MAAK,QAJRqH,EAAeU,EAAApI,KAAAoI,EAAAlK,KAAG,GAAH,cAAAkK,EAAAnK,KAAG,GAAHmK,EAAA1H,GAAA0H,EAAA,kBAQF,OAREA,EAAAlK,KAAG,GAQC8J,EAAwB7I,EAAOuI,EAAiBhI,GAAO,QAAhE,GAANiI,EAAMS,EAAApI,MACRf,IAA8B,CAAFmJ,EAAAlK,KAAA,SAC9B,OAD8BkK,EAAAlK,KAAA,GACxBJ,EAAMwC,SAASS,EAAU,CAAEnC,MAAO+I,EAAO3C,KAAI,SAAAzE,GAAI,OAAIC,KAAKC,UAAUF,EAAK,MAAI,eAAA6H,EAAAnI,OAAA,SAG9E0H,GAAU,MAAI,yBAAAS,EAAA3J,OAAA,GAAAyJ,EAAA,mBACtB,EAEYG,EAAoB,SAAOlJ,EAAeM,GAAqB,OAA0B/B,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA0K,IAAA,IAAAC,EAAA3J,EAAAc,EAAA5B,EAAA8B,EAAA4I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjJ,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAAgL,GAAA,cAAAA,EAAA9K,KAAA8K,EAAA7K,MAAA,UAC/FuB,GAAsC,IAAvBA,EAAYF,OAAY,CAAAwJ,EAAA7K,KAAA,eAAA6K,EAAA9I,OAAA,SACnC,IAAE,OAGLsI,EAAQpJ,EAAM6J,cACdpK,EAAqB,GACrBc,EAAS,CAAC,cAGZX,MACFjB,EAAQK,EAAAA,EAAaC,SAAoBC,EAAAA,EAAQO,MAAOP,EAAAA,EAAQO,MAAML,OAAOkB,cAC9E+I,GAAAS,EAAAA,EAAAA,GAEuBxJ,GAAWsJ,EAAA9K,KAAA,EAAAuK,EAAAU,IAAA,WAAAT,EAAAD,EAAAW,KAAAC,KAAE,CAAFL,EAAA7K,KAAA,SAAf,GAAT4K,EAASL,EAAA1D,OACdhG,IAA0B,CAAFgK,EAAA7K,KAAA,SACb,OADa6K,EAAA7K,KAAA,GACPJ,EAAMuL,SAASP,GAAU,QAA5ClJ,EAAUmJ,EAAA/I,KAAA,QAGRjB,KAA4Ba,GAAclB,IAA4B4K,KAAKC,MAAQ3J,EAAW4J,WAChG5K,EAAM6K,KAAKjJ,KAAKsH,MAAMlI,EAAWW,OACV,KAAduI,GACTP,EAAMlI,IAAIyI,EAAWA,EAAWpJ,GACjC,QAAAqJ,EAAA7K,KAAA,gBAAA6K,EAAA7K,KAAA,iBAAA6K,EAAA9K,KAAA,GAAA8K,EAAArI,GAAAqI,EAAA,SAAAP,EAAAkB,EAAAX,EAAArI,IAAA,eAAAqI,EAAA9K,KAAA,GAAAuK,EAAAmB,IAAAZ,EAAAa,OAAA,YAIiB,OAJjBb,EAAA9K,KAAA,GAAA8K,EAAA7K,KAAA,GAIuBqK,EAAMsB,aAAY,QAApClB,EAASI,EAAA/I,KAAA4I,GAAAK,EAAAA,EAAAA,GAESxJ,GAAWsJ,EAAA9K,KAAA,GAAA2K,EAAAM,IAAA,YAAAL,EAAAD,EAAAO,KAAAC,KAAE,CAAFL,EAAA7K,KAAA,SACQ,GADhC4K,EAASD,EAAA9D,QAEN,QADNlF,EAAW8I,EAAUtI,IAAIyI,UACnB,IAARjJ,OAAQ,EAARA,EAAUiK,SAAO,CAAAf,EAAA7K,KAAA,SACuB,GAA1CU,EAAM6K,KAAK5J,EAASiK,UAChB/K,IAA0B,CAAFgK,EAAA7K,KAAA,SAC1B,OAD0B6K,EAAA7K,KAAA,GACpBJ,EAAMwC,SAASwI,EAAW,CAAEvI,KAAMC,KAAKC,UAAUZ,EAASiK,WAAW,QAAAf,EAAA7K,KAAA,iBAAA6K,EAAA7K,KAAA,iBAAA6K,EAAA9K,KAAA,GAAA8K,EAAAgB,GAAAhB,EAAA,UAAAH,EAAAc,EAAAX,EAAAgB,IAAA,eAAAhB,EAAA9K,KAAA,GAAA2K,EAAAe,IAAAZ,EAAAa,OAAA,mBAAAb,EAAA9I,OAAA,SAK1ErB,GAAK,eAAAmK,EAAA9K,KAAA,GAAA8K,EAAAiB,GAAAjB,EAAA,UAAAA,EAAA9K,KAAA,GAAA8K,EAAA9I,OAAA,SAGHgK,QAAQC,IACbzK,EACGsI,QAAO,SAAAe,GAAS,OAAIA,GAA2B,KAAdA,CAAgB,IACjD9D,KAAI,SAAM8D,GAAS,OAAGpL,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuM,IAAA,IAAA5J,EAAA,OAAA5C,EAAAA,EAAAA,KAAAI,MAAA,SAAAqM,GAAA,cAAAA,EAAAnM,KAAAmM,EAAAlM,MAAA,OACR,OADQkM,EAAAlM,KAAA,EACFgB,EAAoBC,EAAO2J,GAAU,OAA9C,KAAJvI,EAAI6J,EAAApK,MACA,CAAFoK,EAAAlM,KAAA,YACFa,IAA0B,CAAFqL,EAAAlM,KAAA,QAC1B,OAD0BkM,EAAAlM,KAAA,EACpBJ,EAAMwC,SAASwI,EAAW,CAAEvI,KAAMC,KAAKC,UAAUF,KAAQ,cAAA6J,EAAAnK,OAAA,SAE1DM,GAAI,wBAAA6J,EAAA3L,OAAA,GAAA0L,EAAA,IAEd,MACJ,eAAApB,EAAA9K,KAAA,GAAA8K,EAAAsB,GAAAtB,EAAA,UAAAA,EAAA9I,OAAA,SAEM,IAAE,yBAAA8I,EAAAtK,OAAA,GAAA6J,EAAA,sDAGd,EAEKN,EAA0B,SAC9B7I,EACAuI,EACAhI,GAAgB,OACQhC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA0M,IAAA,IAAAC,EAAAhC,EAAAiC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAtN,EAAAA,EAAAA,KAAAI,MAAA,SAAAmN,GAAA,cAAAA,EAAAjN,KAAAiN,EAAAhN,MAAA,UACnBwJ,EAAiB,CAAFwD,EAAAhN,KAAA,eAAAgN,EAAAjL,OAAA,SACX,IAAE,OAGLsK,EAAe7C,EAAgB3C,MAC/BwD,EAAQpJ,EAAM6J,cACdwB,EAA0B,GAAEC,GAAAxB,EAAAA,EAAAA,GACfsB,GAAY,IAA/B,IAAAE,EAAAvB,MAAAwB,EAAAD,EAAAtB,KAAAC,MAAW4B,EAAIN,EAAA3F,MAEO,MADd6F,EAAcI,EAAKG,kBAAkBxH,KAEzC4E,EAAMlI,IAAIuK,EAAaA,EAAalL,EAEvC,OAAA0L,GAAAX,EAAAf,EAAA0B,EAAA,SAAAX,EAAAd,GAAA,CAG4B,OAH5BuB,EAAAjN,KAAA,EAAAiN,EAAAhN,KAAA,GAGkCqK,EAAMsB,aAAY,QAA7CgB,EAAkBK,EAAAlL,KAAA8K,GAAA7B,EAAAA,EAAAA,GAELsB,GAAY,IAA/B,IAAAO,EAAA5B,MAAA6B,EAAAD,EAAA3B,KAAAC,MAAW4B,EAAID,EAAAhG,OAEQ,QADfkG,EAAoBJ,EAAmBxK,IAAI2K,EAAKG,kBAAkBxH,WACnD,IAAjBsH,OAAiB,EAAjBA,EAAmBnB,UACrBU,EAAWf,KAAKwB,EAAkBnB,QAErC,OAAAsB,GAAAN,EAAApB,EAAA0B,EAAA,SAAAN,EAAAnB,GAAA,QAAAuB,EAAAjL,OAAA,SACMuK,GAAU,eAAAU,EAAAjN,KAAA,GAAAiN,EAAAxK,GAAAwK,EAAA,SAAAA,EAAAjN,KAAA,GAAAiN,EAAAjL,OAAA,SAKRgK,QAAQC,IACbK,EACGxC,QAAO,SAAAsD,GAAW,OAAIC,QAAQD,EAAYF,kBAAkBxH,GAAG,IAC/DqB,KACC,SAAMqG,GAAW,OAAG3N,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2N,IAAA,OAAA5N,EAAAA,EAAAA,KAAAI,MAAA,SAAAyN,GAAA,cAAAA,EAAAvN,KAAAuN,EAAAtN,MAAA,OACjB,OADiBsN,EAAAtN,KAAA,EACXiB,EACJe,IAAImL,EAAYF,kBAAkBxH,IAClCxD,kBAAkBC,EAAAA,EAAUwE,WAAC,GAADC,EAAAA,EAAAA,GAAInF,KAChCW,MAAK,cAAAmL,EAAAvL,OAAA,SAAAuL,EAAAxL,MAAA,wBAAAwL,EAAA/M,OAAA,GAAA8M,EAAA,IAAc,MAE7B,eAAAL,EAAAjN,KAAA,GAAAiN,EAAAnB,GAAAmB,EAAA,UAAAA,EAAAjL,OAAA,SAEM,IAAE,yBAAAiL,EAAAzM,OAAA,GAAA6L,EAAA,0BAGd,EAEKxF,EAAkC,SAAO3F,EAAeoF,GAAqB,OAAI7G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA6N,IAAA,OAAA9N,EAAAA,EAAAA,KAAAI,MAAA,SAAA2N,GAAA,cAAAA,EAAAzN,KAAAyN,EAAAxN,MAAA,cAAAwN,EAAAzL,OAAA,SAC9E0L,EAAAA,EAAkBC,OAAkBzM,EAAOoF,IAAQ,wBAAAmH,EAAAjN,OAAA,GAAAgN,EAAA,IAC3D,EAEK9G,EAAgC,SAACxF,EAAe4F,EAAiBP,GACrE,OAAOmH,EAAAA,EAAkBE,gBACvB1M,EACA4F,EAAMC,KAAI,SAAAC,GAAC,OAAIzE,KAAKsH,MAAM7C,EAAe,IACzCT,EAEJ,EASMzE,EAAmB,SAA4BjC,EAA8BqK,GAAW,OAAsBzK,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAkO,IAAA,IAAAvL,EAAA,OAAA5C,EAAAA,EAAAA,KAAAI,MAAA,SAAAgO,GAAA,cAAAA,EAAA9N,KAAA8N,EAAA7N,MAAA,WAC9Ga,IAA0B,CAAFgN,EAAA7N,KAAA,QACb,OADa6N,EAAA7N,KAAA,EACPJ,EAAMuL,SAASlB,GAAI,OAA5B,MAAJ5H,EAAIwL,EAAA/L,OAEEtB,IAA4B4K,KAAKC,MAAQhJ,EAAKiJ,YAAU,CAAAuC,EAAA7N,KAAA,eAAA6N,EAAA9L,OAAA,SAE3DO,KAAKsH,MAAMvH,EAAKA,OAAgB,cAAAwL,EAAA9L,OAAA,SAIpC,MAAI,wBAAA8L,EAAAtN,OAAA,GAAAqN,EAAA,IACZ,EAEYpH,EAAuB,SAAO5G,EAAkCkO,EAAe7D,GAAW,OAAIzK,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAqO,IAAA,IAAA3H,EAAA,OAAA3G,EAAAA,EAAAA,KAAAI,MAAA,SAAAmO,GAAA,cAAAA,EAAAjO,KAAAiO,EAAAhO,MAAA,OAGxG,GAFIJ,IACHA,EAAQK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAW0N,KAG9D/M,IAA8B,CAAFiN,EAAAhO,KAAA,QACb,OADagO,EAAAhO,KAAA,EACPJ,EAAMuL,SAASlB,GAAI,OAA5B,MAAR7D,EAAQ4H,EAAAlM,QA1hBhB7B,EAAAA,EAAaQ,OAAOL,UAAUO,oBAAsBV,EAAAA,EAAaQ,OAAOG,2BA4hBtBwK,KAAKC,MAAQjF,EAASkF,YAAU,CAAA0C,EAAAhO,KAAA,eAAAgO,EAAAjM,OAAA,SACvEqE,GAAQ,cAAA4H,EAAAjM,OAAA,SAIZ,MAAI,wBAAAiM,EAAAzN,OAAA,GAAAwN,EAAA,IACZ,EAGYE,EAAwC,SAAO9H,GAA+C,OAAI3G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwO,IAAA,IAAA5H,EAAA1G,EAAAuO,EAAAlE,EAAA,OAAAxK,EAAAA,EAAAA,KAAAI,MAAA,SAAAuO,GAAA,cAAAA,EAAArO,KAAAqO,EAAApO,MAAA,OAClE,GAArCsG,EAAWH,EAAkBG,UAE/BH,EAAkBkI,QAAS,CAAFD,EAAApO,KAAA,QAC3B,OAD2BoO,EAAApO,KAAA,EACrBmG,EAAkBnG,OAAM,WAE5Be,IAA8B,CAAFqN,EAAApO,KAAA,SAW9B,OAVMJ,EAAmCK,EAAAA,EAAaC,SACpDC,EAAAA,EAAQC,UACRD,EAAAA,EAAQC,UAAUC,OAAOD,WAKrB+N,EADM,kDACQG,KAAKhI,GACnB2D,EAAMkE,EAAQ,GAAEC,EAAApO,KAAA,GAEhBJ,EAAMwC,SAAS6H,EAAK,CAAEvJ,MAAOyF,EAAkBU,MAAMC,KAAI,SAAAC,GAAC,OAAIzE,KAAKC,UAAUwE,EAAE,IAAGT,SAAAA,IAAW,yBAAA8H,EAAA7N,OAAA,GAAA2N,EAAA,IAEtG,EASYK,GAAuB,SAClCtN,EACAC,EACAM,GAAgB,OACWhC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA8O,IAAA,IAAA7M,EAAA8M,EAAAC,EAAA,OAAAjP,EAAAA,EAAAA,KAAAI,MAAA,SAAA8O,GAAA,cAAAA,EAAA5O,KAAA4O,EAAA3O,MAAA,OAEP,OAFO2O,EAAA5O,KAAA,EAAA4O,EAAA3O,KAAA,EAEDiB,EACrBe,IAAId,GACJ0N,aAAaC,EAAAA,GAAaC,KAC1B7M,kBAAkBC,EAAAA,EAAUwE,WAAC,GAADC,EAAAA,EAAAA,GAAInF,KAChCW,MAAK,OAJM,GAMU,OANlBR,EAAQgN,EAAA7M,MAMDiN,OAAc,CAAAJ,EAAA3O,KAAA,eAAA2O,EAAA5M,OAAA,SAIlB,CAAE0M,KAAM,KAAMO,UAAW,OAAM,UAC5BrN,EAASsN,GAAI,CAAFN,EAAA3O,KAAA,gBAAA2O,EAAA5M,OAAA,SACd,MAAI,QAImB,OAD1B0M,EAAO9M,EAASuN,QAAQ/M,IAAI,QAAOwM,EAAAnM,GACtB2M,EAAAA,GAAYR,EAAA3O,KAAA,GAAO2B,EAAS+M,OAAM,QAAxC,OAAwCC,EAAA9C,GAAA8C,EAAA7M,KAAA6M,EAAA3O,KAAA,IAAxC,EAAA2O,EAAAnM,IAAAmM,EAAA9C,IAAyC,QAA5C,OAAJ6C,EAAIC,EAAA7M,KAAA6M,EAAA5M,OAAA,SACH,CAAE0M,KAAAA,EAAMO,UAAWN,IAAM,eAAAC,EAAA5O,KAAA,GAAA4O,EAAA7C,GAAA6C,EAAA,SAAAA,EAAA5M,OAAA,SAEzB,MAAI,yBAAA4M,EAAApO,OAAA,GAAAiO,EAAA,kBAEd,EASYY,GAAe,SAAOnO,EAAeC,GAAgB,OAAwB1B,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2P,IAAA,IAAA1N,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAAyP,GAAA,cAAAA,EAAAvP,KAAAuP,EAAAtP,MAAA,OAIpE,MAFL,aAAYsP,EAAAvP,KAAA,EAAAuP,EAAAtP,KAAA,EAEDiB,EAAMe,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAFjD,eAEqEC,MAAK,OAAzE,OAARR,EAAQ2N,EAAAxN,KAAAwN,EAAAvN,OAAA,SACPJ,GAAY,MAAI,OAAA2N,EAAAvP,KAAA,EAAAuP,EAAA9M,GAAA8M,EAAA,wBAAAA,EAAAvN,OAAA,SAIlB,MAAI,yBAAAuN,EAAA/O,OAAA,GAAA8O,EAAA,iBACZ,EASYE,GAAmB,SAC9BtO,EACAC,EACAsO,GAAwB,OACEhQ,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+P,IAAA,IAAAC,EAAA/N,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAA8P,GAAA,cAAAA,EAAA5P,KAAA4P,EAAA3P,MAAA,OAWV,OAXU2P,EAAA5P,KAAA,EAGT,kBACT2P,EAAiB,CACrB5C,KAAM,CACJ,oCAA0D,IAArB0C,GAA+C,OAArBA,EAA4B,SAAW,YAEzGG,EAAA5P,KAAA,EAAA4P,EAAA3P,KAAA,EAGmBiB,EACfe,IAAId,GACJe,mBAAkBC,EAAAA,EAAAA,GAVR,oBAWV0N,KAAKtN,KAAKC,UAAUmN,IAAgB,OAHvC/N,EAAQgO,EAAA7N,KAAA6N,EAAA3P,KAAG,GAAH,aAAA2P,EAAA5P,KAAG,EAAH4P,EAAAnN,GAAAmN,EAAA,wBAAAA,EAAA5N,OAAA,SAOHJ,GAAY,MAAI,eAAAgO,EAAA5P,KAAA,GAAA4P,EAAA9D,GAAA8D,EAAA,SAAAA,EAAA5N,OAAA,SAEhB,MAAI,yBAAA4N,EAAApP,OAAA,GAAAkP,EAAA,wBAEd,EAUYI,GAAgB,SAC3B5O,EACAC,EACA4O,EACAC,EACA1N,GAAU,OAC4B7C,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAsQ,IAAA,IAAAC,EAAAtO,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAAqQ,GAAA,cAAAA,EAAAnQ,KAAAmQ,EAAAlQ,MAAA,OAUtB,OAVsBkQ,EAAAnQ,KAAA,EAGrB,kBACTkQ,EAAS,CACb,iBAAkBH,EAClB,gBAAiBC,GAClBG,EAAAnQ,KAAA,EAAAmQ,EAAAlQ,KAAA,EAGmBiB,EAAMkP,OAAOnO,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAPlD,oBAOsEgN,QAAQe,GAAQG,IAAI/N,GAAK,OAA5GV,EAAQuO,EAAApO,KAAAoO,EAAAlQ,KAAG,GAAH,aAAAkQ,EAAAnQ,KAAG,EAAHmQ,EAAA1N,GAAA0N,EAAA,wBAAAA,EAAAnO,OAAA,SAMHJ,GAAY,MAAI,eAAAuO,EAAAnQ,KAAA,GAAAmQ,EAAArE,GAAAqE,EAAA,SAAAA,EAAAnO,OAAA,SAEhB,MAAI,yBAAAmO,EAAA3P,OAAA,GAAAyP,EAAA,wBAEd,EAUYK,GAAkB,SAAOpP,EAAeC,EAAkBmB,GAAU,OAAwB7C,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4Q,IAAA,IAAA3O,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAA0Q,GAAA,cAAAA,EAAAxQ,KAAAwQ,EAAAvQ,MAAA,OAMvF,OANuFuQ,EAAAxQ,KAAA,EAGtF,kBAAiBwQ,EAAAxQ,KAAA,EAAAwQ,EAAAvQ,KAAA,EAGZiB,EAAMkP,OAAOnO,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAHlD,oBAGsEkO,IAAI/N,GAAK,OAA5FV,EAAQ4O,EAAAzO,KAAAyO,EAAAvQ,KAAG,GAAH,aAAAuQ,EAAAxQ,KAAG,EAAHwQ,EAAA/N,GAAA+N,EAAA,wBAAAA,EAAAxO,OAAA,SAIHJ,GAAY,MAAI,eAAA4O,EAAAxQ,KAAA,GAAAwQ,EAAA1E,GAAA0E,EAAA,SAAAA,EAAAxO,OAAA,SAEhB,MAAI,yBAAAwO,EAAAhQ,OAAA,GAAA+P,EAAA,wBAEd,EASYE,GAAoB,SAAOvP,EAAeC,GAAgB,OAAmB1B,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+Q,IAAA,OAAAhR,EAAAA,EAAAA,KAAAI,MAAA,SAAA6Q,GAAA,cAAAA,EAAA3Q,KAAA2Q,EAAA1Q,MAAA,OAGtF,MAFa,kBAAiB0Q,EAAA3Q,KAAA,EAAA2Q,EAAA1Q,KAAA,EAExBiB,EAAMkP,OAAOnO,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAFtC,oBAE0DyO,SAAQ,OAAAD,EAAA1Q,KAAA,sBAAA0Q,EAAA3Q,KAAA,EAAA2Q,EAAAlO,GAAAkO,EAAA,SAAAA,EAAA3O,OAAA,SAKxE,MAAI,wBAAA2O,EAAAnQ,OAAA,GAAAkQ,EAAA,iBAEd,C,kYCjzBYhD,EAAiB,oBAAAA,KAAAmD,EAAAA,EAAAA,GAAA,KAAAnD,EAAA,CAuE3B,OAvE2BoD,EAAAA,EAAAA,GAAApD,EAAA,EAAAxD,IAAA,QAAA9H,IAQ5B,WACE,OAAO2O,KAAKC,MACd,GAEA,CAAA9G,IAAA,UAAA9H,IAOA,WACE,OAAOiL,QAAQ0D,KAAKE,UACtB,GAEA,CAAA/G,IAAA,WAAA9H,IA2DA,WACE,OAAO2O,KAAKE,WAAa,EAC3B,GAIA,CAAA/G,IAAA,OAAApD,MAMa,W,iJACPiK,KAAKE,UAAW,CAAFlR,EAAAE,KAAA,QAEE,OADZiR,EAAeH,KAAKE,UAAUE,MAAMJ,KAAKK,UAAU,GAAErR,EAAAE,KAAA,EACnC8Q,KAAKM,OAAOpP,IAAIiP,GAAcI,QAAQP,KAAKK,UAAUhP,MAAK,OAApE,GAARR,EAAQ7B,EAAAgC,OACK,QAAfwP,EAAQ,OAAR3P,QAAQ,IAARA,OAAQ,EAARA,EAAUkF,aAAK,IAAAyK,OAAA,EAAAA,EAAEjQ,QAAM,CAAAvB,EAAAE,KAAA,QAE8B,OADvD8Q,KAAKC,OAASD,KAAKC,OAAOhO,OAAOpB,EAASkF,OAC1CiK,KAAKE,UAAYrP,EAAS,mBAA6B7B,EAAAiC,OAAA,SAChDJ,EAASkF,OAAK,cAAA/G,EAAAiC,OAAA,SAGlB,MAAI,yBAAAjC,EAAAS,OAAA,GAAAZ,EAAA,S,IACZ,EAAAsK,IAAA,SAAApD,MAtEM,SAAuB5F,EAAeoF,EAAuBgL,G,uIAChD,O,SAAMhL,EAAQlE,MAAK,OAAvB,KACF,QADNR,EAAQC,EAAAE,YACF,IAARH,OAAQ,EAARA,EAAUkF,OAAK,CAAAjF,EAAA5B,KAAA,SAK4B,OAJvCuR,EAAW,IAAI9D,GACZ2D,OAASnQ,EAClBsQ,EAASR,OAASpP,EAASkF,MAC3B0K,EAASP,UAAYrP,EAAS,mBAC9B4P,EAASJ,SAAWE,GAAWpQ,EAAMoQ,QAAQzP,EAAAG,OAAA,SACtCwP,GAAQ,eAAA3P,EAAAG,OAAA,SAGV,MAAI,yBAAAH,EAAArB,OAAA,GAAAkB,EAAA,I,GAGb,CAAAwI,IAAA,kBAAApD,MAYO,SAA0B5F,EAAe4F,GAAmC,IAAvBP,EAAAlF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAmB,KACvEmQ,EAAW,IAAI9D,EAQrB,OALA8D,EAASH,OAASnQ,EAClBsQ,EAASR,OAASlK,EAClB0K,EAASP,UAAY1K,EACrBiL,EAASJ,SAAWlQ,EAAMoQ,QAEnBE,CACT,KAAC9D,CAAA,CAvE2B,E","sources":["../../../packages/mgt-components/dist/es6/graph/src/graph/graph.files.ts","../../../packages/mgt-element/dist/es6/utils/src/utils/GraphPageIterator.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  CacheItem,\n  CacheService,\n  CacheStore,\n  CollectionResponse,\n  GraphPageIterator,\n  IGraph,\n  prepScopes\n} from '@microsoft/mgt-element';\nimport { DriveItem, SharedInsight, Trending, UploadSession, UsedInsight } from '@microsoft/microsoft-graph-types';\nimport { schemas } from './cacheStores';\nimport { GraphRequest, ResponseType } from '@microsoft/microsoft-graph-client';\nimport { blobToBase64 } from '../utils/Utils';\n\n/**\n * Simple type guard to check if a response is an UploadSession\n *\n * @param session\n * @returns\n */\nexport const isUploadSession = (session: unknown): session is UploadSession => {\n  return Array.isArray((session as UploadSession).nextExpectedRanges);\n};\n\ntype Insight = SharedInsight | UsedInsight | Trending;\n\n/**\n * Object to be stored in cache\n */\ninterface CacheFile extends CacheItem {\n  /**\n   * stringified json representing a file\n   */\n  file?: string;\n}\n\n/**\n * Object to be stored in cache\n */\ninterface CacheFileList extends CacheItem {\n  /**\n   * stringified json representing a list of files\n   */\n  files?: string[];\n  /**\n   * nextLink string to get next page\n   */\n  nextLink?: string;\n}\n\n/**\n * document thumbnail object stored in cache\n */\nexport interface CacheThumbnail extends CacheItem {\n  /**\n   * tag associated with thumbnail\n   */\n  eTag?: string;\n  /**\n   * document thumbnail\n   */\n  thumbnail?: string;\n}\n\n/**\n * Clear Cache of FileList\n */\nexport const clearFilesCache = async (): Promise<void> => {\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(\n    schemas.fileLists,\n    schemas.fileLists.stores.fileLists\n  );\n  await cache.clearStore();\n};\n\n/**\n * Defines the time it takes for objects in the cache to expire\n */\nexport const getFileInvalidationTime = (): number =>\n  CacheService.config.files.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether or not the cache is enabled\n */\nexport const getIsFilesCacheEnabled = (): boolean =>\n  CacheService.config.files.isEnabled && CacheService.config.isEnabled;\n\n/**\n * Defines the time it takes for objects in the cache to expire\n */\nexport const getFileListInvalidationTime = (): number =>\n  CacheService.config.fileLists.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether or not the cache is enabled\n */\nexport const getIsFileListsCacheEnabled = (): boolean =>\n  CacheService.config.fileLists.isEnabled && CacheService.config.isEnabled;\n\n/**\n * Load a DriveItem give and arbitrary query\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const getDriveItemByQuery = async (\n  graph: IGraph,\n  resource: string,\n  storeName: string = schemas.files.stores.fileQueries,\n  scopes = 'files.read'\n): Promise<DriveItem> => {\n  // get from cache\n  const cache: CacheStore<CacheFile> = CacheService.getCache<CacheFile>(schemas.files, storeName);\n  const cachedFile = await getFileFromCache(cache, resource);\n  if (cachedFile) {\n    return cachedFile;\n  }\n\n  let response: DriveItem;\n  try {\n    response = (await graph.api(resource).middlewareOptions(prepScopes(scopes)).get()) as DriveItem;\n\n    if (getIsFilesCacheEnabled()) {\n      await cache.putValue(resource, { file: JSON.stringify(response) });\n    }\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  return response || null;\n};\n\n// GET /drives/{drive-id}/items/{item-id}\nexport const getDriveItemById = async (graph: IGraph, driveId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/drives/${driveId}/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.driveFiles);\n};\n\n// GET /drives/{drive-id}/root:/{item-path}\nexport const getDriveItemByPath = async (graph: IGraph, driveId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/drives/${driveId}/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.driveFiles);\n};\n\n// GET /groups/{group-id}/drive/items/{item-id}\nexport const getGroupDriveItemById = async (graph: IGraph, groupId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/groups/${groupId}/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.groupFiles);\n};\n\n// GET /groups/{group-id}/drive/root:/{item-path}\nexport const getGroupDriveItemByPath = async (graph: IGraph, groupId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/groups/${groupId}/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.groupFiles);\n};\n\n// GET /me/drive/items/{item-id}\nexport const getMyDriveItemById = async (graph: IGraph, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/me/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /me/drive/root:/{item-path}\nexport const getMyDriveItemByPath = async (graph: IGraph, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/me/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /sites/{site-id}/drive/items/{item-id}\nexport const getSiteDriveItemById = async (graph: IGraph, siteId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/sites/${siteId}/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.siteFiles);\n};\n\n// GET /sites/{site-id}/drive/root:/{item-path}\nexport const getSiteDriveItemByPath = async (graph: IGraph, siteId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/sites/${siteId}/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.siteFiles);\n};\n\n// GET /sites/{site-id}/lists/{list-id}/items/{item-id}/driveItem\nexport const getListDriveItemById = async (\n  graph: IGraph,\n  siteId: string,\n  listId: string,\n  itemId: string\n): Promise<DriveItem> => {\n  const endpoint = `/sites/${siteId}/lists/${listId}/items/${itemId}/driveItem`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.siteFiles);\n};\n\n// GET /users/{user-id}/drive/items/{item-id}\nexport const getUserDriveItemById = async (graph: IGraph, userId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/users/${userId}/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /users/{user-id}/drive/root:/{item-path}\nexport const getUserDriveItemByPath = async (graph: IGraph, userId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/users/${userId}/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /me/insights/trending/{id}/resource\n// GET /me/insights/used/{id}/resource\n// GET /me/insights/shared/{id}/resource\nexport const getMyInsightsDriveItemById = async (\n  graph: IGraph,\n  insightType: string,\n  id: string\n): Promise<DriveItem> => {\n  const endpoint = `/me/insights/${insightType}/${id}/resource`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.insightFiles, 'sites.read.all');\n};\n\n// GET /users/{id or userPrincipalName}/insights/{trending or used or shared}/{id}/resource\nexport const getUserInsightsDriveItemById = async (\n  graph: IGraph,\n  userId: string,\n  insightType: string,\n  id: string\n): Promise<DriveItem> => {\n  const endpoint = `/users/${userId}/insights/${insightType}/${id}/resource`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.insightFiles, 'sites.read.all');\n};\n\nconst getIterator = async (\n  graph: IGraph,\n  endpoint: string,\n  storeName: string,\n  scopes: string[],\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  let filesPageIterator: GraphPageIterator<DriveItem>;\n\n  // get iterator from cached values\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(schemas.fileLists, storeName);\n  const fileList = await getFileListFromCache(cache, storeName, `${endpoint}:${top}`);\n  if (fileList) {\n    filesPageIterator = getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);\n\n    return filesPageIterator;\n  }\n\n  // get iterator from graph request\n  let request: GraphRequest;\n  try {\n    request = graph.api(endpoint).middlewareOptions(prepScopes(...scopes));\n    if (top) {\n      request.top(top);\n    }\n    filesPageIterator = await getFilesPageIteratorFromRequest(graph, request);\n\n    if (getIsFileListsCacheEnabled()) {\n      const nextLink = filesPageIterator.nextLink;\n      await cache.putValue(endpoint, {\n        files: filesPageIterator.value.map(v => JSON.stringify(v)),\n        nextLink\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return filesPageIterator || null;\n};\n\n// GET /me/drive/root/children\nexport const getFilesIterator = async (graph: IGraph, top?: number): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = '/me/drive/root/children';\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /drives/{drive-id}/items/{item-id}/children\nexport const getDriveFilesByIdIterator = async (\n  graph: IGraph,\n  driveId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/drives/${driveId}/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /drives/{drive-id}/root:/{item-path}:/children\nexport const getDriveFilesByPathIterator = async (\n  graph: IGraph,\n  driveId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/drives/${driveId}/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /groups/{group-id}/drive/items/{item-id}/children\nexport const getGroupFilesByIdIterator = async (\n  graph: IGraph,\n  groupId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/groups/${groupId}/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /groups/{group-id}/drive/root:/{item-path}:/children\nexport const getGroupFilesByPathIterator = async (\n  graph: IGraph,\n  groupId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/groups/${groupId}/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /me/drive/items/{item-id}/children\nexport const getFilesByIdIterator = async (\n  graph: IGraph,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/me/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /me/drive/root:/{item-path}:/children\nexport const getFilesByPathIterator = async (\n  graph: IGraph,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/me/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /sites/{site-id}/drive/items/{item-id}/children\nexport const getSiteFilesByIdIterator = async (\n  graph: IGraph,\n  siteId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/sites/${siteId}/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /sites/{site-id}/drive/root:/{item-path}:/children\nexport const getSiteFilesByPathIterator = async (\n  graph: IGraph,\n  siteId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/sites/${siteId}/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /users/{user-id}/drive/items/{item-id}/children\nexport const getUserFilesByIdIterator = async (\n  graph: IGraph,\n  userId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/users/${userId}/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\n// GET /users/{user-id}/drive/root:/{item-path}:/children\nexport const getUserFilesByPathIterator = async (\n  graph: IGraph,\n  userId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/users/${userId}/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, ['files.read'], top);\n};\n\nexport const getFilesByListQueryIterator = async (\n  graph: IGraph,\n  listQuery: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, listQuery, cacheStore, ['files.read', 'sites.read.all'], top);\n};\n\n// GET /me/insights/{trending\t| used | shared}\nexport const getMyInsightsFiles = async (graph: IGraph, insightType: string): Promise<DriveItem[]> => {\n  const endpoint = `/me/insights/${insightType}`;\n  const cacheStore = schemas.fileLists.stores.insightfileLists;\n\n  // get files from cached values\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(schemas.fileLists, cacheStore);\n  const fileList = await getFileListFromCache(cache, cacheStore, endpoint);\n  if (fileList) {\n    // fileList.files is string[] so JSON.parse to get proper objects\n    return fileList.files.map((file: string) => JSON.parse(file) as DriveItem);\n  }\n\n  // get files from graph request\n  const scopes = ['sites.read.all'];\n  let insightResponse: CollectionResponse<Insight>;\n  try {\n    insightResponse = (await graph\n      .api(endpoint)\n      .filter(\"resourceReference/type eq 'microsoft.graph.driveItem'\")\n      .middlewareOptions(prepScopes(...scopes))\n      .get()) as CollectionResponse<Insight>;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  const result = await getDriveItemsByInsights(graph, insightResponse, scopes);\n  if (getIsFileListsCacheEnabled()) {\n    await cache.putValue(endpoint, { files: result.map(file => JSON.stringify(file)) });\n  }\n\n  return result || null;\n};\n\n// GET /users/{id | userPrincipalName}/insights/{trending\t| used | shared}\nexport const getUserInsightsFiles = async (\n  graph: IGraph,\n  userId: string,\n  insightType: string\n): Promise<DriveItem[]> => {\n  let endpoint: string;\n  let filter: string;\n\n  if (insightType === 'shared') {\n    endpoint = '/me/insights/shared';\n    filter = `((lastshared/sharedby/id eq '${userId}') and (resourceReference/type eq 'microsoft.graph.driveItem'))`;\n  } else {\n    endpoint = `/users/${userId}/insights/${insightType}`;\n    filter = \"resourceReference/type eq 'microsoft.graph.driveItem'\";\n  }\n\n  const key = `${endpoint}?$filter=${filter}`;\n\n  // get files from cached values\n  const cacheStore = schemas.fileLists.stores.insightfileLists;\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(schemas.fileLists, cacheStore);\n  const fileList = await getFileListFromCache(cache, cacheStore, key);\n  if (fileList) {\n    return fileList.files.map((file: string) => JSON.parse(file) as DriveItem);\n  }\n\n  // get files from graph request\n  const scopes = ['sites.read.all'];\n  let insightResponse: CollectionResponse<Insight>;\n\n  try {\n    insightResponse = (await graph\n      .api(endpoint)\n      .filter(filter)\n      .middlewareOptions(prepScopes(...scopes))\n      .get()) as CollectionResponse<Insight>;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  const result = await getDriveItemsByInsights(graph, insightResponse, scopes);\n  if (getIsFileListsCacheEnabled()) {\n    await cache.putValue(endpoint, { files: result.map(file => JSON.stringify(file)) });\n  }\n\n  return result || null;\n};\n\nexport const getFilesByQueries = async (graph: IGraph, fileQueries: string[]): Promise<DriveItem[]> => {\n  if (!fileQueries || fileQueries.length === 0) {\n    return [];\n  }\n\n  const batch = graph.createBatch();\n  const files: DriveItem[] = [];\n  const scopes = ['files.read'];\n  let cache: CacheStore<CacheFile>;\n  let cachedFile: CacheFile;\n  if (getIsFilesCacheEnabled()) {\n    cache = CacheService.getCache<CacheFile>(schemas.files, schemas.files.stores.fileQueries);\n  }\n\n  for (const fileQuery of fileQueries) {\n    if (getIsFilesCacheEnabled()) {\n      cachedFile = await cache.getValue(fileQuery); // todo\n    }\n\n    if (getIsFilesCacheEnabled() && cachedFile && getFileInvalidationTime() > Date.now() - cachedFile.timeCached) {\n      files.push(JSON.parse(cachedFile.file) as DriveItem);\n    } else if (fileQuery !== '') {\n      batch.get(fileQuery, fileQuery, scopes);\n    }\n  }\n\n  try {\n    const responses = await batch.executeAll();\n\n    for (const fileQuery of fileQueries) {\n      const response = responses.get(fileQuery);\n      if (response?.content) {\n        files.push(response.content as DriveItem);\n        if (getIsFilesCacheEnabled()) {\n          await cache.putValue(fileQuery, { file: JSON.stringify(response.content) });\n        }\n      }\n    }\n\n    return files;\n  } catch (_) {\n    try {\n      return Promise.all(\n        fileQueries\n          .filter(fileQuery => fileQuery && fileQuery !== '')\n          .map(async fileQuery => {\n            const file = await getDriveItemByQuery(graph, fileQuery);\n            if (file) {\n              if (getIsFilesCacheEnabled()) {\n                await cache.putValue(fileQuery, { file: JSON.stringify(file) });\n              }\n              return file;\n            }\n          })\n      );\n    } catch (e) {\n      return [];\n    }\n  }\n};\n\nconst getDriveItemsByInsights = async (\n  graph: IGraph,\n  insightResponse: CollectionResponse<Insight>,\n  scopes: string[]\n): Promise<DriveItem[]> => {\n  if (!insightResponse) {\n    return [];\n  }\n\n  const insightItems = insightResponse.value;\n  const batch = graph.createBatch();\n  const driveItems: DriveItem[] = [];\n  for (const item of insightItems) {\n    const driveItemId = item.resourceReference.id;\n    if (driveItemId !== '') {\n      batch.get(driveItemId, driveItemId, scopes);\n    }\n  }\n\n  try {\n    const driveItemResponses = await batch.executeAll();\n\n    for (const item of insightItems) {\n      const driveItemResponse = driveItemResponses.get(item.resourceReference.id);\n      if (driveItemResponse?.content) {\n        driveItems.push(driveItemResponse.content as DriveItem);\n      }\n    }\n    return driveItems;\n  } catch (_) {\n    try {\n      // we're filtering the insights calls that feed this to ensure that only\n      // drive items are returned, but we still need to check for nulls\n      return Promise.all(\n        insightItems\n          .filter(insightItem => Boolean(insightItem.resourceReference.id))\n          .map(\n            async insightItem =>\n              (await graph\n                .api(insightItem.resourceReference.id)\n                .middlewareOptions(prepScopes(...scopes))\n                .get()) as DriveItem\n          )\n      );\n    } catch (e) {\n      return [];\n    }\n  }\n};\n\nconst getFilesPageIteratorFromRequest = async (graph: IGraph, request: GraphRequest) => {\n  return GraphPageIterator.create<DriveItem>(graph, request);\n};\n\nconst getFilesPageIteratorFromCache = (graph: IGraph, value: string[], nextLink: string) => {\n  return GraphPageIterator.createFromValue<DriveItem>(\n    graph,\n    value.map(v => JSON.parse(v) as DriveItem),\n    nextLink\n  );\n};\n\n/**\n * Load a file from the cache\n *\n * @param {CacheStore<CacheFile>} cache\n * @param {string} key\n * @return {*}\n */\nconst getFileFromCache = async <TResult = DriveItem>(cache: CacheStore<CacheFile>, key: string): Promise<TResult> => {\n  if (getIsFilesCacheEnabled()) {\n    const file = await cache.getValue(key);\n\n    if (file && getFileInvalidationTime() > Date.now() - file.timeCached) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return JSON.parse(file.file) as TResult;\n    }\n  }\n\n  return null;\n};\n\nexport const getFileListFromCache = async (cache: CacheStore<CacheFileList>, store: string, key: string) => {\n  if (!cache) {\n    cache = CacheService.getCache<CacheFileList>(schemas.fileLists, store);\n  }\n\n  if (getIsFileListsCacheEnabled()) {\n    const fileList = await cache.getValue(key);\n\n    if (fileList && getFileListInvalidationTime() > Date.now() - fileList.timeCached) {\n      return fileList;\n    }\n  }\n\n  return null;\n};\n\n// refresh filesPageIterator to its next iteration and save current page to cache\nexport const fetchNextAndCacheForFilesPageIterator = async (filesPageIterator: GraphPageIterator<DriveItem>) => {\n  const nextLink = filesPageIterator.nextLink;\n\n  if (filesPageIterator.hasNext) {\n    await filesPageIterator.next();\n  }\n  if (getIsFileListsCacheEnabled()) {\n    const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(\n      schemas.fileLists,\n      schemas.fileLists.stores.fileLists\n    );\n\n    // match only the endpoint (after version number and before OData query params) e.g. /me/drive/root/children\n    const reg = /(graph.microsoft.com\\/(v1.0|beta))(.*?)(?=\\?)/gi;\n    const matches = reg.exec(nextLink);\n    const key = matches[3];\n\n    await cache.putValue(key, { files: filesPageIterator.value.map(v => JSON.stringify(v)), nextLink });\n  }\n};\n\n/**\n * retrieves the specified document thumbnail\n *\n * @param {string} resource\n * @param {string[]} scopes\n * @returns {Promise<string>}\n */\nexport const getDocumentThumbnail = async (\n  graph: IGraph,\n  resource: string,\n  scopes: string[]\n): Promise<CacheThumbnail> => {\n  try {\n    const response = (await graph\n      .api(resource)\n      .responseType(ResponseType.RAW)\n      .middlewareOptions(prepScopes(...scopes))\n      .get()) as Response;\n\n    if (response.status === 404) {\n      // 404 means the resource does not have a thumbnail\n      // we still want to cache that state\n      // so we return an object that can be cached\n      return { eTag: null, thumbnail: null };\n    } else if (!response.ok) {\n      return null;\n    }\n\n    const eTag = response.headers.get('eTag');\n    const blob = await blobToBase64(await response.blob());\n    return { eTag, thumbnail: blob };\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * retrieve file properties based on Graph query\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const getGraphfile = async (graph: IGraph, resource: string): Promise<DriveItem> => {\n  // get from graph request\n  const scopes = 'files.read';\n  try {\n    const response = (await graph.api(resource).middlewareOptions(prepScopes(scopes)).get()) as DriveItem;\n    return response || null;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  return null;\n};\n\n/**\n * retrieve UploadSession Url for large file and send by chuncks\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const getUploadSession = async (\n  graph: IGraph,\n  resource: string,\n  conflictBehavior: number\n): Promise<UploadSession> => {\n  try {\n    // get from graph request\n    const scopes = 'files.readwrite';\n    const sessionOptions = {\n      item: {\n        '@microsoft.graph.conflictBehavior': conflictBehavior === 0 || conflictBehavior === null ? 'rename' : 'replace'\n      }\n    };\n    let response: UploadSession;\n    try {\n      response = (await graph\n        .api(resource)\n        .middlewareOptions(prepScopes(scopes))\n        .post(JSON.stringify(sessionOptions))) as UploadSession;\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    return response || null;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * send file chunck to OneDrive, SharePoint Site\n *\n * @param graph\n * @param resource\n * @param file\n * @returns\n */\nexport const sendFileChunk = async (\n  graph: IGraph,\n  resource: string,\n  contentLength: string,\n  contentRange: string,\n  file: Blob\n): Promise<UploadSession | DriveItem> => {\n  try {\n    // get from graph request\n    const scopes = 'files.readwrite';\n    const header = {\n      'Content-Length': contentLength,\n      'Content-Range': contentRange\n    };\n    let response: UploadSession | DriveItem;\n    try {\n      response = (await graph.client.api(resource).middlewareOptions(prepScopes(scopes)).headers(header).put(file)) as\n        | UploadSession\n        | DriveItem;\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    return response || null;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * send file to OneDrive, SharePoint Site\n *\n * @param graph\n * @param resource\n * @param file\n * @returns\n */\nexport const sendFileContent = async (graph: IGraph, resource: string, file: File): Promise<DriveItem> => {\n  try {\n    // get from graph request\n    const scopes = 'files.readwrite';\n    let response: DriveItem;\n    try {\n      response = (await graph.client.api(resource).middlewareOptions(prepScopes(scopes)).put(file)) as DriveItem;\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    return response || null;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * delete upload session\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const deleteSessionFile = async (graph: IGraph, resource: string): Promise<void> => {\n  const scopes = 'files.readwrite';\n  try {\n    await graph.client.api(resource).middlewareOptions(prepScopes(scopes)).delete();\n  } catch {\n    // TODO: re-examine the error handling here\n    // DELETE returns a 204 on success so void makes sense to return on the happy path\n    // but we should probably throw on error\n    return null;\n  }\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphRequest } from '@microsoft/microsoft-graph-client';\nimport { IGraph } from '../IGraph';\nimport { CollectionResponse } from '../CollectionResponse';\n\n/**\n * A helper class to assist in getting multiple pages from a resource\n *\n * @export\n * @class GraphPageIterator\n * @template T\n */\nexport class GraphPageIterator<T> {\n  /**\n   * Gets all the items already fetched for this request\n   *\n   * @readonly\n   * @type {T[]}\n   * @memberof GraphPageIterator\n   */\n  public get value(): T[] {\n    return this._value;\n  }\n\n  /**\n   * Gets wheather this request has more pages\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof GraphPageIterator\n   */\n  public get hasNext(): boolean {\n    return Boolean(this._nextLink);\n  }\n\n  /**\n   * Creates a new GraphPageIterator\n   *\n   * @static\n   * @template T - the type of entities expected from this request\n   * @param {IGraph} graph - the graph instance to use for making requests\n   * @param {GraphRequest} request - the initial request\n   * @param {string} [version] - optional version to use for the requests - by default uses the default version\n   * from the graph parameter\n   * @returns a GraphPageIterator\n   * @memberof GraphPageIterator\n   */\n  public static async create<T>(graph: IGraph, request: GraphRequest, version?: string): Promise<GraphPageIterator<T>> {\n    const response = (await request.get()) as CollectionResponse<T>;\n    if (response?.value) {\n      const iterator = new GraphPageIterator<T>();\n      iterator._graph = graph;\n      iterator._value = response.value;\n      iterator._nextLink = response['@odata.nextLink'] as string;\n      iterator._version = version || graph.version;\n      return iterator;\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a new GraphPageIterator from existing value\n   *\n   * @static\n   * @template T - the type of entities expected from this request\n   * @param {IGraph} graph - the graph instance to use for making requests\n   * @param value - the existing value\n   * @param nextLink - optional nextLink to use to get the next page\n   * from the graph parameter\n   * @returns a GraphPageIterator\n   * @memberof GraphPageIterator\n   */\n  public static createFromValue<T>(graph: IGraph, value: T[], nextLink: string = null): GraphPageIterator<T> {\n    const iterator = new GraphPageIterator<T>();\n\n    // create iterator from values\n    iterator._graph = graph;\n    iterator._value = value;\n    iterator._nextLink = nextLink;\n    iterator._version = graph.version;\n\n    return iterator;\n  }\n\n  private _graph: IGraph;\n  private _nextLink: string;\n  /**\n   * Gets the next link for this request\n   *\n   * @readonly\n   * @type {string}\n   * @memberof GraphPageIterator\n   */\n  public get nextLink(): string {\n    return this._nextLink || '';\n  }\n  private _version: string;\n  private _value: T[];\n\n  /**\n   * Gets the next page for this request\n   *\n   * @returns {Promise<T[]>}\n   * @memberof GraphPageIterator\n   */\n  public async next(): Promise<T[]> {\n    if (this._nextLink) {\n      const nextResource = this._nextLink.split(this._version)[1];\n      const response = (await this._graph.api(nextResource).version(this._version).get()) as CollectionResponse<T>;\n      if (response?.value?.length) {\n        this._value = this._value.concat(response.value);\n        this._nextLink = response['@odata.nextLink'] as string;\n        return response.value;\n      }\n    }\n    return null;\n  }\n}\n"],"names":["isUploadSession","session","Array","isArray","nextExpectedRanges","clearFilesCache","__awaiter","_regeneratorRuntime","mark","_callee","cache","wrap","_context","prev","next","CacheService","getCache","schemas","fileLists","stores","clearStore","stop","getFileInvalidationTime","config","files","invalidationPeriod","defaultInvalidationPeriod","getIsFilesCacheEnabled","isEnabled","getIsFileListsCacheEnabled","getDriveItemByQuery","graph","resource","storeName","arguments","length","undefined","fileQueries","scopes","_callee2","cachedFile","response","_context2","getFileFromCache","sent","abrupt","api","middlewareOptions","prepScopes","get","putValue","file","JSON","stringify","t0","getDriveItemById","driveId","itemId","_callee3","endpoint","_context3","concat","driveFiles","getDriveItemByPath","itemPath","_callee4","_context4","getGroupDriveItemById","groupId","_callee5","_context5","groupFiles","getGroupDriveItemByPath","_callee6","_context6","getMyDriveItemById","_callee7","_context7","userFiles","getMyDriveItemByPath","_callee8","_context8","getSiteDriveItemById","siteId","_callee9","_context9","siteFiles","getSiteDriveItemByPath","_callee10","_context10","getListDriveItemById","listId","_callee11","_context11","getUserDriveItemById","userId","_callee12","_context12","getUserDriveItemByPath","_callee13","_context13","getMyInsightsDriveItemById","insightType","id","_callee14","_context14","insightFiles","getUserInsightsDriveItemById","_callee15","_context15","getIterator","top","_callee16","filesPageIterator","fileList","request","nextLink","_context16","getFileListFromCache","getFilesPageIteratorFromCache","apply","_toConsumableArray","getFilesPageIteratorFromRequest","value","map","v","getFilesIterator","_callee17","cacheStore","_context17","getDriveFilesByIdIterator","_callee18","_context18","getDriveFilesByPathIterator","_callee19","_context19","getGroupFilesByIdIterator","_callee20","_context20","getGroupFilesByPathIterator","_callee21","_context21","getFilesByIdIterator","_callee22","_context22","getFilesByPathIterator","_callee23","_context23","getSiteFilesByIdIterator","_callee24","_context24","getSiteFilesByPathIterator","_callee25","_context25","getUserFilesByIdIterator","_callee26","_context26","getUserFilesByPathIterator","_callee27","_context27","getFilesByListQueryIterator","listQuery","_callee28","_context28","getMyInsightsFiles","_callee29","insightResponse","result","_context29","insightfileLists","parse","filter","getDriveItemsByInsights","getUserInsightsFiles","_callee30","key","_context30","getFilesByQueries","_callee32","batch","_iterator","_step","_fileQuery","responses","_iterator2","_step2","fileQuery","_context32","createBatch","_createForOfIteratorHelper","s","n","done","getValue","Date","now","timeCached","push","e","f","finish","executeAll","content","t1","t2","Promise","all","_callee31","_context31","t3","_callee34","insightItems","driveItems","_iterator3","_step3","_item","driveItemId","driveItemResponses","_iterator4","_step4","item","driveItemResponse","_context34","resourceReference","err","insightItem","Boolean","_callee33","_context33","_callee35","_context35","GraphPageIterator","create","createFromValue","_callee36","_context36","store","_callee37","_context37","fetchNextAndCacheForFilesPageIterator","_callee38","matches","_context38","hasNext","exec","getDocumentThumbnail","_callee39","eTag","blob","_context39","responseType","ResponseType","RAW","status","thumbnail","ok","headers","blobToBase64","getGraphfile","_callee40","_context40","getUploadSession","conflictBehavior","_callee41","sessionOptions","_context41","post","sendFileChunk","contentLength","contentRange","_callee42","header","_context42","client","put","sendFileContent","_callee43","_context43","deleteSessionFile","_callee44","_context44","delete","_classCallCheck","_createClass","this","_value","_nextLink","nextResource","split","_version","_graph","version","_a","iterator"],"sourceRoot":""}